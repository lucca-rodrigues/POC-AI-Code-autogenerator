import { Tool } from "@langchain/core/tools";

export class FileContentTool extends Tool {
  constructor(llm) {
    super();
    this.llm = llm;
  }

  name = "file_content_generator";
  description = "Gera o conte√∫do para um arquivo espec√≠fico";

  async _call(input) {
    try {
      const { fileName, projectType } = JSON.parse(input);

      const prompt = `Voc√™ √© um desenvolvedor expert. Gere o c√≥digo completo e funcional para o arquivo ${fileName} em um projeto ${projectType}.
                      Requisitos:
                      1. Gere APENAS o c√≥digo fonte, sem coment√°rios sobre o que fazer
                      2. O c√≥digo deve ser completo e funcional
                      3. Use as melhores pr√°ticas de programa√ß√£o
                      4. Siga os padr√µes modernos de desenvolvimento
                      5. Inclua importa√ß√µes necess√°rias
                      6. Use tipagem adequada (TypeScript)
                      7. Implemente tratamento de erros
                      8. Siga princ√≠pios SOLID
                      9. Inclua valida√ß√µes necess√°rias

                      Importante:
                      - N√ÉO inclua coment√°rios sobre o que deveria ser feito
                      - N√ÉO liste melhorias ou sugest√µes
                      - APENAS gere o c√≥digo fonte funcional
                      - Se for um controller ou service, implemente todos os m√©todos CRUD
                      - Se for um modelo, inclua todas as propriedades e valida√ß√µes
                      - Se for um middleware, implemente a l√≥gica completa

                      Retorne apenas o c√≥digo fonte, sem explica√ß√µes ou markdown.`;

      const result = await this.llm.invoke(prompt);

      // Limpar o resultado de poss√≠veis formata√ß√µes
      let content = result.content
        .replace(/```typescript\n/g, "")
        .replace(/```ts\n/g, "")
        .replace(/```javascript\n/g, "")
        .replace(/```\n/g, "")
        .replace(/```/g, "")
        .trim();

      // Se o conte√∫do parecer ser uma lista de instru√ß√µes em vez de c√≥digo
      if (!content.includes("import") && !content.includes("export") && !content.includes("class") && !content.includes("interface")) {
        console.log("‚ö†Ô∏è Conte√∫do parece ser instru√ß√µes em vez de c√≥digo. Gerando novamente...");

        // Tenta gerar novamente com um prompt mais espec√≠fico
        const retryPrompt = `Gere o c√≥digo fonte real e completo para ${fileName}. 
                              N√ÉO d√™ instru√ß√µes ou sugest√µes.
                              APENAS o c√≥digo fonte funcional.

                              Por exemplo, se for um controller, deve ser algo como:

                              import { Request, Response } from 'express';
                              import { CardService } from '../services/CardService';

                              export class CardController {
                                constructor(private cardService: CardService) {}

                                async create(req: Request, res: Response) {
                                  try {
                                    const card = await this.cardService.create(req.body);
                                    return res.status(201).json(card);
                                  } catch (error) {
                                    return res.status(400).json({ error: error.message });
                                  }
                                }
                                // ... outros m√©todos
                              }

                              Gere o c√≥digo completo agora:`;

        const retryResult = await this.llm.invoke(retryPrompt);
        content = retryResult.content
          .replace(/```typescript\n/g, "")
          .replace(/```ts\n/g, "")
          .replace(/```javascript\n/g, "")
          .replace(/```\n/g, "")
          .replace(/```/g, "")
          .trim();
      }

      console.log(`üìù Conte√∫do gerado para ${fileName}`);
      return content;
    } catch (error) {
      console.error(`‚ùå Erro ao gerar conte√∫do para ${JSON.parse(input).fileName}:`, error);
      throw new Error(`Falha ao gerar conte√∫do do arquivo: ${error.message}`);
    }
  }
}
