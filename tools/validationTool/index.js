import { Tool } from "@langchain/core/tools";
import { ChatPromptTemplate } from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";

export class ValidationTool extends Tool {
  constructor(llm) {
    super();
    this.llm = llm;
  }

  name = "code_validator";
  description = "Valida o conte√∫do de um arquivo";

  async _call(input) {
    try {
      const { fileName, content } = JSON.parse(input);

      const prompt = `Analise o seguinte conte√∫do do arquivo ${fileName}:
      
      ${content}

      Se o conte√∫do for uma lista de instru√ß√µes ao inv√©s de c√≥digo fonte real:
      1. Gere o c√≥digo fonte completo implementando todas as instru√ß√µes
      2. Retorne "Corre√ß√£o sugerida:" seguido do c√≥digo fonte completo
      
      Se for c√≥digo fonte v√°lido:
      1. Analise problemas e melhorias necess√°rias
      2. Se houver problemas, retorne "Corre√ß√£o sugerida:" seguido do c√≥digo corrigido
      3. Se estiver OK, retorne "OK"

      Importante: 
      - Se for uma lista de instru√ß√µes, SEMPRE gere o c√≥digo fonte completo
      - Retorne apenas o texto da corre√ß√£o ou "OK", sem formata√ß√£o markdown
      - Inclua todas as importa√ß√µes necess√°rias`;

      const result = await this.llm.invoke(prompt);

      // Extrair e limpar o conte√∫do da mensagem AI
      let validationResult = result.content.replace(/```\n/g, "").replace(/```/g, "").trim();

      console.log(`üîç Resultado da valida√ß√£o para ${fileName}:`, validationResult);

      return validationResult;
    } catch (error) {
      console.error(`‚ùå Erro ao validar ${JSON.parse(input).fileName}:`, error);
      throw new Error(`Falha na valida√ß√£o do arquivo: ${error.message}`);
    }
  }
}
